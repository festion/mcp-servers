name: Deploy GitHub Actions Runner

on:
  push:
    branches: [main, develop]
    paths:
      - 'github-actions-runner/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'github-actions-runner/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: 'Version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/github-runner

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run pre-deployment validation
        run: |
          cd github-actions-runner/deploy
          ./scripts/pre-deploy.sh dev

      - name: Run unit tests
        run: |
          cd github-actions-runner
          if [ -f "package.json" ]; then
            npm ci
            npm test
          fi

      - name: Run security scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false

      - name: Build and test Docker image
        run: |
          cd github-actions-runner
          docker build -t test-runner .
          docker run --rm test-runner --version

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Images
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./github-actions-runner
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Development
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure deployment environment
        run: |
          echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          echo "DEPLOY_VERSION=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy to development
        run: |
          cd github-actions-runner/deploy
          ./deploy.sh dev deploy ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Run post-deployment tests
        run: |
          cd github-actions-runner/deploy
          ./scripts/post-deploy.sh dev

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure deployment environment
        run: |
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "DEPLOY_VERSION=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          cd github-actions-runner/deploy
          ./deploy.sh staging deploy ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          JWT_SECRET_STAGING: ${{ secrets.JWT_SECRET_STAGING }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_STAGING }}

      - name: Run integration tests
        run: |
          cd github-actions-runner/deploy
          ./validation/integration-tests.sh staging

      - name: Run performance tests
        run: |
          cd github-actions-runner/deploy
          ./validation/performance-tests.sh staging

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure deployment environment
        run: |
          echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          echo "DEPLOY_VERSION=${{ github.sha }}" >> $GITHUB_ENV

      - name: Create deployment backup
        run: |
          cd github-actions-runner/deploy
          ./scripts/backup.sh prod

      - name: Deploy to production
        run: |
          cd github-actions-runner/deploy
          ./deploy.sh prod deploy ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          JWT_SECRET_PROD: ${{ secrets.JWT_SECRET_PROD }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_PROD }}

      - name: Run production verification
        run: |
          cd github-actions-runner/deploy
          ./scripts/post-deploy.sh prod

      - name: Run security validation
        run: |
          cd github-actions-runner/deploy
          ./validation/security-scan.sh prod

  rollback:
    runs-on: ubuntu-latest
    name: Rollback Deployment
    if: failure()
    needs: [deploy-dev, deploy-staging, deploy-prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine rollback environment
        id: rollback-env
        run: |
          if [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-staging.result }}" == "failure" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Get previous version
        id: previous-version
        run: |
          cd github-actions-runner/deploy
          PREV_VERSION=$(grep -B1 "${{ steps.rollback-env.outputs.environment }}" logs/deployments.log | grep "version" | tail -2 | head -1 | sed 's/.*"version": "\([^"]*\)".*/\1/')
          echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT

      - name: Execute rollback
        run: |
          cd github-actions-runner/deploy
          ./scripts/rollback.sh ${{ steps.rollback-env.outputs.environment }} ${{ steps.previous-version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Verify rollback
        run: |
          cd github-actions-runner/deploy
          ./validation/health-check.sh ${{ steps.rollback-env.outputs.environment }}

  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "environment=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          message: |
            Deployment ${{ steps.status.outputs.status }} for GitHub Actions Runner
            Environment: ${{ steps.status.outputs.environment }}
            Version: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ steps.status.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY