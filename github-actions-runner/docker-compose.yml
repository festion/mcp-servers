version: '3.8'

services:
  # GitHub Actions Runner
  runner:
    image: ghcr.io/actions/actions-runner:latest
    container_name: github-runner
    environment:
      - RUNNER_NAME=${RUNNER_NAME:-homelab-runner}
      - RUNNER_TOKEN=${RUNNER_TOKEN}
      - RUNNER_REPOSITORY_URL=${RUNNER_REPOSITORY_URL}
      - RUNNER_LABELS=${RUNNER_LABELS:-homelab,docker,self-hosted}
      - RUNNER_WORKDIR=/tmp/runner/work
      - RUNNER_ALLOW_RUNASROOT=1
      - DISABLE_RUNNER_UPDATE=${DISABLE_RUNNER_UPDATE:-false}
    volumes:
      - runner_data:/tmp/runner
      - runner_work:/tmp/runner/work
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config:/etc/runner:ro
      - logs:/var/log/runner
    networks:
      - runner_network
      - host_network
    restart: unless-stopped
    depends_on:
      - health_monitor
      - log_aggregator
    deploy:
      resources:
        limits:
          cpus: '${RUNNER_CPU_LIMIT:-2.0}'
          memory: ${RUNNER_MEMORY_LIMIT:-4G}
        reservations:
          cpus: '${RUNNER_CPU_RESERVE:-0.5}'
          memory: ${RUNNER_MEMORY_RESERVE:-1G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - SYS_ADMIN

  # Health Monitoring Service
  health_monitor:
    image: prom/node-exporter:latest
    container_name: runner-health-monitor
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'
    volumes:
      - /:/host:ro,rslave
      - ./monitoring:/etc/monitoring:ro
    networks:
      - runner_network
    ports:
      - "9100:9100"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log Aggregation Service
  log_aggregator:
    image: fluent/fluent-bit:latest
    container_name: runner-log-aggregator
    volumes:
      - logs:/var/log/runner:ro
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
    networks:
      - runner_network
    ports:
      - "24224:24224"
    restart: unless-stopped
    depends_on:
      - metrics_collector
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    environment:
      - FLUENT_ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-elasticsearch}
      - FLUENT_ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT:-9200}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2020/"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Metrics Collection Service
  metrics_collector:
    image: prom/prometheus:latest
    container_name: runner-metrics-collector
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - metrics_data:/prometheus
    networks:
      - runner_network
    ports:
      - "9090:9090"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Backup Service
  backup_service:
    image: alpine:latest
    container_name: runner-backup-service
    volumes:
      - runner_data:/backup/runner_data:ro
      - runner_work:/backup/runner_work:ro
      - logs:/backup/logs:ro
      - metrics_data:/backup/metrics_data:ro
      - backup_storage:/backup/output
      - ./scripts/backup.sh:/backup/backup.sh:ro
    networks:
      - runner_network
    restart: "no"
    command: |
      sh -c "
        apk add --no-cache tar gzip curl &&
        chmod +x /backup/backup.sh &&
        while true; do
          /backup/backup.sh
          sleep ${BACKUP_INTERVAL:-3600}
        done
      "
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - BACKUP_COMPRESSION=${BACKUP_COMPRESSION:-gzip}
    depends_on:
      - runner
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Reverse Proxy for Security
  nginx_proxy:
    image: nginx:alpine
    container_name: runner-nginx-proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - runner_network
      - host_network
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - runner
      - health_monitor
      - metrics_collector
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Watchdog Service for Auto-Recovery
  watchdog:
    image: alpine:latest
    container_name: runner-watchdog
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/watchdog.sh:/watchdog.sh:ro
    networks:
      - runner_network
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache curl docker-cli &&
        chmod +x /watchdog.sh &&
        while true; do
          /watchdog.sh
          sleep ${WATCHDOG_INTERVAL:-60}
        done
      "
    environment:
      - WATCHDOG_ENDPOINTS=${WATCHDOG_ENDPOINTS:-http://runner:8080/health,http://health_monitor:9100/,http://metrics_collector:9090/-/healthy}
      - RESTART_UNHEALTHY=${RESTART_UNHEALTHY:-true}
      - MAX_RESTART_ATTEMPTS=${MAX_RESTART_ATTEMPTS:-3}
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    depends_on:
      - runner
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

networks:
  runner_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: runner_br0
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.1.0/24
          gateway: 172.20.0.1
    internal: false
    attachable: true

  host_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      driver: default
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1
    internal: false

volumes:
  runner_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/dev/workspace/github-actions-runner/data/runner

  runner_work:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/dev/workspace/github-actions-runner/data/work

  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/dev/workspace/github-actions-runner/logs

  metrics_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/dev/workspace/github-actions-runner/data/metrics

  backup_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/dev/workspace/github-actions-runner/backups