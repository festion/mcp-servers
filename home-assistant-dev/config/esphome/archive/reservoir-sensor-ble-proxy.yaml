esphome:
  name: reservoir-sensor-ble-proxy
  friendly_name: Reservoir_sensor_ble_proxy

esp32:
  board: esp32dev
  framework:
    type: esp-idf

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/esphome
      ref: onewire
    components: [gpio]
    refresh: 1min

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "0S4anKxWnAMScykl56UG9/alw55lqLXwcYt/UVHoTM4="
  services:
    - service: set_last_fertigation_time
      variables:
        timestamp: int
      then:
        - lambda: |-
            id(last_fertigation_timestamp) = timestamp;
            id(depth_sum) = 0;
            id(depth_count) = 0;

ota:
  - platform: esphome
    password: "9c431a40450731471313d1237fb0a122"

bluetooth_proxy:
    

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Reservoir-Sensor-Ble-Proxy"
    password: "o666wgwrILtl"

captive_portal:

time:
  - platform: sntp
    id: sntp_time
    timezone: America/Chicago
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time_sync:
      then:
        - logger.log: "Time synchronized with NTP server"

one_wire:
  platform: gpio
  pin: GPIO13

globals:
  - id: last_fertigation_timestamp
    type: int
    restore_value: true
    initial_value: '0'
  - id: depth_sum
    type: float
    restore_value: true
    initial_value: '0'
  - id: depth_count
    type: uint32_t
    restore_value: true
    initial_value: '0'

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    entity_category: diagnostic

  - platform: ultrasonic
    trigger_pin: GPIO17
    echo_pin: GPIO16
    timeout: 2m
    pulse_time: 20us
    name: "Raw Distance (m)"
    id: raw_distance_m
    unit_of_measurement: "m"
    accuracy_decimals: 3
    update_interval: 60s
    filters:
      - filter_out: nan
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            float cm = x * 100.0;
            if (cm < 10.0 || cm > 40.0) {
              ESP_LOGW("depth_debug", "Out-of-range reading filtered: %.2f cm", cm);
              return;
            }
            ESP_LOGD("depth_debug", "Accepted ultrasonic reading: %.2f cm", cm);
            id(depth_sum) += cm;
            id(depth_count)++;

  - platform: template
    name: "Raw Distance (cm)"
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    update_interval: 60s
    lambda: |-
      if (!std::isnan(id(raw_distance_m).state)) {
        return id(raw_distance_m).state * 100.0;
      }
      return NAN;

  - platform: template
    name: "Reservoir Current Volume"
    id: reservoir_current_volume
    unit_of_measurement: "L"
    device_class: "volume"
    state_class: "total"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      if (!std::isnan(id(raw_distance_m).state)) {
        const float bucket_height_cm = 36.20;
        const float bucket_diameter_cm = 30.48;
        float distance_cm = id(raw_distance_m).state * 100.0;
        float water_level_cm = bucket_height_cm - distance_cm;
        if (water_level_cm < 0) water_level_cm = 0;
        if (water_level_cm > bucket_height_cm) water_level_cm = bucket_height_cm;
        float bucket_radius = bucket_diameter_cm / 2.0;
        float volume_cm3 = M_PI * bucket_radius * bucket_radius * water_level_cm;
        return volume_cm3 / 1000.0;
      }
      return NAN;
      
  - platform: template
    name: "Average Depth Since Last Fertigation"
    id: average_depth_since_last_fertigation
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    update_interval: 60s
    lambda: |-
      if (id(depth_count) > 0) {
        return id(depth_sum) / id(depth_count);
      }
      return NAN;

  - platform: template
    name: "Average Volume Since Last Fertigation"
    id: average_volume_since_last_fertigation
    unit_of_measurement: "L"
    device_class: "volume"
    state_class: "total"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      if (id(depth_count) > 0) {
        const float bucket_height_cm = 36.20;
        const float bucket_diameter_cm = 30.48;
        float avg_depth_cm = id(depth_sum) / id(depth_count);
        // Convert the average distance to actual water level height
        float avg_water_level_cm = bucket_height_cm - avg_depth_cm;
        if (avg_water_level_cm < 0) avg_water_level_cm = 0;
        if (avg_water_level_cm > bucket_height_cm) avg_water_level_cm = bucket_height_cm;
        float bucket_radius = bucket_diameter_cm / 2.0;
        float avg_volume_cm3 = M_PI * bucket_radius * bucket_radius * avg_water_level_cm;
        return avg_volume_cm3 / 1000.0;
      }
      return NAN;

  - platform: dallas_temp
    id: reservoir_water_temp
    address: 0x3f00000033f59f28
    name: "Reservoir Water Temp"
    device_class: temperature
    state_class: measurement
    filters:
      - filter_out: nan
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1

text_sensor:
  - platform: template
    name: "Last Fertigation Time"
    id: last_fertigation_text
    icon: mdi:timer-sync
    update_interval: 60s
    lambda: |-
      if (id(last_fertigation_timestamp) == 0) {
        return {"Never"};
      }
      time_t timestamp = id(last_fertigation_timestamp);
      struct tm* timeinfo = localtime(&timestamp);
      char buffer[26];
      strftime(buffer, sizeof(buffer), "%b %d, %Y %I:%M %p", timeinfo);
      return {buffer}; 
    