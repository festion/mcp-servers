# esphome heart rate monitor based on Waveshare ESP32C6 LCD 1.47 (https://www.waveshare.com/wiki/ESP32-C6-LCD-1.47)
# the code is taken from here with my corrections https://community.home-assistant.io/t/help-needed-to-get-this-tiny-screen-working-esp32-c6-1-47in-display/800102/30

# enter esphome api key and ble_mac of your HRM monitor device
# also change your home assistant temperature sensor entity_id to get it on the screen 
# time is 24h formatted
# you can also change color of current heart rate for your specific needs...

substitutions:
  friendly_name: "esp32c6-lcd"
  device_name: esp32c6-lcd
  id: esp32c6_lcd
  logger: "DEBUG"
  # logger: "VERY_VERBOSE"
  ble_mac: ***

  vendor: "Waveshare"
  model: "ESP32-C6-LCD-1-47in"
  device_version: "v"
  microcontroller: "ESP32-C6FH4 (QFN32) (revision v0.1)"
  frequency: "160MHz"
  ram: "512KB"
  rom: "320KB"
  hp_sram: "512KB"
  lp_sram: "16KB"
  flash: "4MB"
  features: "WiFi 6, BT 5, Thread (802.15.4)"
  crystal: "40MHz"

  # i2c
  i2c_id: bus_a
  sda: GPIO1
  scl: GPIO2
  scan: "false"
  # SPI bus for LCD and SD Card
  miso_pin: GPIO5
  mosi_pin: GPIO6
  clk_pin: GPIO7
  # LCD Pinout
  lcd_cs_pin: GPIO14
  lcd_dc_pin: GPIO15
  lcd_reset_pin: GPIO21
  lcd_backlight_pin: GPIO22
  # SD Card
  sd_cs_pin: GPIO4
  # LED
  rgb_led: GPIO8
  # One Wire
  one_wire: GPIO10

i2c:
  - id: $i2c_id
    sda: $sda
    scl: $scl
    scan: False

spi:
  clk_pin: $clk_pin
  miso_pin: $miso_pin
  mosi_pin: $mosi_pin

one_wire:
  - pin: $one_wire
    platform: gpio

esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6
  flash_size: 4MB
  framework:
    type: esp-idf
    version: 5.3.1
    #version: 5.4.0
    platform_version: 6.9.0
    #platform_version: 6.10.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_DETECT: y
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y
      CONFIG_OPENTHREAD_ENABLED: n
      CONFIG_USE_MINIMAL_MDNS: y
      # Memory optimization
      COMPILER_OPTIMIZATION_SIZE: y
      COMPILER_OPTIMIZATION_LEVEL_RELEASE: y
      CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE: y
      CONFIG_HEAP_POISONING_DISABLED: y

esphome:
  friendly_name: $friendly_name
  name: $device_name
  name_add_mac_suffix: false
  comment: "${device_description}"
  area: $area
  project:
    name: "${vendor}.${model}"
    version: "${device_version}"
  platformio_options:
    board_build.flash_mode: dio
    build_flags:
      - "-DI2C_NUM_1=I2C_NUM_0"
      - "-DBOARD_HAS_PSRAM"
      - "-Wl,-Map,output.map"
    board_build.arduino.memory_type: qio_opi
    platform_packages:
      - platformio/toolchain-xtensa-esp-elf @ 14.2.0+20241119

logger:
  level: $logger

api:
  encryption:
    key: "***"  
  id: api_id
  reboot_timeout: 300s

ota:
  - platform: esphome
    id: ota_esphome
    password: "***"

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 5min
  #power_save_mode: HIGH
  ap:
    ssid: "Esp32C6-Lcd Fallback Hotspot"
    password: "***"  

ble_client:
  - mac_address: "${ble_mac}"
    id: heart_rate_monitor

binary_sensor:
  # https://esphome.io/components/binary_sensor/status.html
  # Reports if this device is Connected or not
  - platform: status
    name: "Status"
    id: "${id}_status"
    icon: mdi:check-network
    entity_category: diagnostic

button:
  # Remotely reboot your node into Safe Mode.
  # https://esphome.io/components/switch/safe_mode.html
  - platform: safe_mode
    name: "(Safe Mode)"
    icon: mdi:restart-alert
    id: "${id}_safe_mode"
    entity_category: config
    disabled_by_default: True
  # Restart
  - platform: restart
    name: "Restart"
    icon: mdi:restart
    id: "${id}_restart"
    # entity_category: diagnostic
    disabled_by_default: True
  # Shutdown
  - platform: shutdown
    name: "Shutdown"
    id: "${id}_shutdown"
    # entity_category: diagnostic
    disabled_by_default: True

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: uptime
    type: timestamp
    name: Uptime
    entity_category: diagnostic

  - platform: wifi_signal
    name: WiFi Signal
    id: wifi_signal_db
    icon: mdi:wifi-strength-outline
    entity_category: diagnostic
    update_interval: 30s
    disabled_by_default: True

  - platform: homeassistant
    name: AMS_Temperature
    entity_id: sensor.xiaomi_4_temperatura
    id: ams_temperature
    internal: true
    #unit_of_measurement: "°C"

  - platform: ble_client
    type: characteristic
    ble_client_id: heart_rate_monitor
    id: heart_rate_measurement
    name: "${device_name} Heart rate measurement"
    service_uuid: '180d'  # Heart Rate Service
    characteristic_uuid: '2a37' # Heart Rate Measurement
    notify: true
    lambda: |-
      uint16_t heart_rate_measurement = x[1];
      if (x[0] & 1) {
          heart_rate_measurement += (x[2] << 8);
      }
      return (float)heart_rate_measurement;
    icon: 'mdi:heart'
    unit_of_measurement: 'bpm'
    update_interval: 1s

font:
  #- file: "common/fonts/gotham-medium.ttf"
  - file: "common/fonts/8-bit-nintendo.ttf"
    id: nes_1x
    size: 7 # Pixel Perfect
  #- file: "common/fonts/gotham-medium.ttf"
  - file: "common/fonts/8-bit-nintendo.ttf"
    id: nes_2x
    size: 14
  # - file: "common/fonts/8-bit-nintendo.ttf"
  #   id: nes_3x
  #   size: 21
  # - file: "common/fonts/8-bit-nintendo.ttf"
  #   id: nes_4x
  #   size: 28
  # - file: "common/fonts/gotham-Light-webfont.ttf"
  #   id: gotham_lt
  #   size: 25
  - file: "common/fonts/gotham-medium.ttf"
    id: gotham_md
    size: 150
  # - file: "common/fonts/gotham-Black-webfont.ttf"
  #   id: gotham_b
  #   size: 30

output:
  - platform: ledc
    pin: $lcd_backlight_pin
    id: lcd_backlight
    frequency: 1000 Hz

number:
  - platform: template
    name: "Display Brightness"
    id: display_brightness
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 100
    restore_value: true
    mode: slider
    on_value:
      then:
        - output.set_level:
            id: lcd_backlight
            level: !lambda "return x / 100.0;"

# https://esphome.io/components/display/
# TFT Display (ST7789)
display:
  - platform: st7789v
    cs_pin: $lcd_cs_pin
    dc_pin:
      number: $lcd_dc_pin
      ignore_strapping_warning: true
    reset_pin: $lcd_reset_pin
    model: Waveshare 1.47in 172X320
    id: tft_ha
    #rotation: 0
    rotation: 270
    lambda: |-
      ESP_LOGD("display", "Display update running");
      auto black = Color(0, 0, 0);
      auto gray = Color(128, 128, 128);
      auto red = Color(255, 0, 0);
      auto orange = Color(255, 165, 0);
      auto yellow = Color(255, 255, 0);
      auto green = Color(0, 255, 0);
      auto blue = Color(0, 0, 255);
      auto hablue = Color(3, 169, 244);
      auto white = Color(255, 255, 255);

      // Check if the HA time text sensor is available
      // if (id(readable_ha_time).has_state() && id(readable_ha_time).state.length() > 0) {
        // Print time from HA text sensor
      //   it.printf(it.get_width()/2, 10, id(nes_1x), TextAlign::TOP_CENTER, "%s", id(readable_ha_time).state.c_str());
      // } else {
        // Fallback to time from ESPHome's `homeassistant_time`
        auto cur_time = id(homeassistant_time).now();
        if (cur_time.is_valid()) {
          auto hour = cur_time.hour;
          //auto ampm = "am";
          // Convert military time to standard AM/PM format
          //if (hour > 12) hour = hour - 12;
          //if (hour >= 12) ampm = "pm";
          //if (hour == 0) hour = 12; // Midnight adjustment
          // Print formatted time
          // it.printf(it.get_width()/2, -10, id(nes_2x), TextAlign::TOP_CENTER, "%2d:%02d %s", hour, cur_time.minute, ampm);
          //it.printf(it.get_width()/2, -8, id(nes_2x), TextAlign::TOP_CENTER, "%2d:%02d", hour, cur_time.minute);
          it.printf(it.get_width()*2/3, +8, id(nes_2x), white, TextAlign::CENTER, "%2d:%02d", hour, cur_time.minute);
        } else {}
      // }

            // AMS Temperature
      if (id(ams_temperature).has_state()) {
        if (!isnan(id(ams_temperature).state)) {
          //it.printf(it.get_width()/2, it.get_height()+10, id(nes_2x), white, TextAlign::BOTTOM_CENTER, "%.0f °C", id(ams_temperature).state);
          it.printf(it.get_width()/3, +8, id(nes_2x), white, TextAlign::CENTER, "%.0f °C", id(ams_temperature).state);
        } else {}
      } else {} 

      // heart_rate_measurement
      if (id(heart_rate_measurement).has_state()) {
        if (!isnan(id(heart_rate_measurement).state)) {
          //it.printf(it.get_width()/2 +10, it.get_height()/2 +40, id(gotham_md), white, TextAlign::CENTER, "%.0f", id(heart_rate_measurement).state);
          int hrm_rate = id(heart_rate_measurement).state;
          if (hrm_rate > 90) {
            it.printf(it.get_width()/2, it.get_height()/2 +15, id(gotham_md), red, TextAlign::CENTER, "%.0f", id(heart_rate_measurement).state);
          }
          else {
            it.printf(it.get_width()/2, it.get_height()/2 +15, id(gotham_md), white, TextAlign::CENTER, "%.0f", id(heart_rate_measurement).state);
          }    
        } else {}
      } else {}